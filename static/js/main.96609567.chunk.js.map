{"version":3,"sources":["components/timer/timer.component.jsx","components/custom-button/custom-button.component.jsx","components/answer-option/answer-option.component.jsx","components/answer-box/answer-box.component.jsx","components/question-body/question-body.component.jsx","components/loader/loader.component.jsx","components/question/question.component.jsx","pages/quiz/quiz.page.jsx","pages/start/start.page.jsx","pages/end/end.page.jsx","App.js","serviceWorker.js","index.js"],"names":["Timer","secondsLeft","totalTime","timeUpAlert","progressBar","document","querySelector","style","background","flexBasis","className","id","CustomButton","text","onClickFunction","submitQuiz","onClick","AnswerOption","optionIndex","checked","selectOption","timeUp","correctAnswer","disable","AnswerBox","props","index","setState","selected","state","options","alreadySelectedCorrect","increaseScore","decreaseScore","this","map","option","key","React","Component","QuestionBody","AnswerBoxOptions","myQuestion","question","shuffledOptions","array","i","length","j","Math","floor","random","shuffle","correct_answer","incorrect_answers","goToNext","lastQuestion","Loader","basicLoader","Question","intervalID","setInterval","prevState","clearInterval","size","next","changeRoute","Quiz","nextQuestion","prevProps","currentQuestion","questionSet","StartPage","src","alt","EndPage","score","totalScore","resetScore","performanceText","percentage","color","App","route","currentPage","fetch","then","res","json","data","results","isLoading","catch","err","console","log","content","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96609567.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './timer.styles.scss';\r\n\r\nconst Timer = ({secondsLeft, totalTime, timeUpAlert}) =>  {\r\n    \r\n\r\n    const progressBar = document.querySelector('#filled');\r\n     \r\n     if(progressBar){\r\n        progressBar.style.background = 'purple';\r\n         progressBar.style.flexBasis = `${((secondsLeft/totalTime)*100)}%`;\r\n        \r\n        /* if(progressBar.style.flexBasis <= '30%'){\r\n            progressBar.style.background = 'red';\r\n         }*/\r\n         \r\n     }\r\n\r\n    return (\r\n\r\n            <div className='timer w-full  h-1/5 bg-white flex flex-col justify-center items-center rounded-lg shadow-xl'>\r\n                <div className='clock w-3/5 h-1/2 flex flex-row justify-center items-center'>\r\n                    <p className='text-2xl text-pink-900'>00:{secondsLeft>=10?secondsLeft:`0${secondsLeft}`}</p>\r\n                </div>\r\n                <div className='time-left xs:w-4/5 sm:w-3/5 h-1/2 flex flex-col justify-center items-center'>\r\n                    <div className='bar w-4/5 xs:h-5  sm:h-6 border border-pink-900 rounded-full flex flex-row justify-start items-center overflow-hidden'>\r\n                        <div id='filled' className='rounded-full h-full bg-pink-900'>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                   \r\n                </div>\r\n                <h4 className='font-normal'>{timeUpAlert}</h4>\r\n            </div>\r\n)}\r\n    \r\n\r\n\r\nexport default Timer;","import  React from 'react';\r\n\r\nimport './custom-button.styles.scss';\r\n\r\nconst CustomButton = ({text, onClickFunction, submitQuiz}) => (\r\n    <div \r\n        className={`custom-button flex flex-row justify-center items-center ${submitQuiz?'submit-quiz':null}`}\r\n        onClick={onClickFunction}\r\n    >\r\n        <span>{text}</span>\r\n    </div>\r\n)\r\n\r\nexport default CustomButton;","import React from 'react';\r\n\r\nimport './answer-option.styles.scss';\r\n\r\n \r\n\r\nconst AnswerOption = ({ optionIndex,text,checked, selectOption, timeUp, correctAnswer, disable}) => (\r\n    <div className='answer-option w-full h-1/4 flex  flex-row justify-start items-center' onClick={(!timeUp)?selectOption:null}>\r\n        <label className = {\r\n             ` answer-container w-full h-full flex flex-row justify-start items-center\r\n\r\n             ${((text === correctAnswer) && timeUp )\r\n                ?'markGreen'\r\n                :''\r\n            }\r\n\r\n            ${\r\n                (checked && timeUp && (text !== correctAnswer))\r\n                ?'markRed'\r\n                :''\r\n            }\r\n            `\r\n        }>\r\n            \r\n            <div className = 'answer-btn  xs:w-1/5 h-full flex flex-row justify-center items-center'>\r\n                 <div className={`custom-radio rounded-full flex flex-row justify-center items-center ${(checked)?'dark':'light'} ${(disable)?'disable':''}`}  >\r\n                        <div className={(checked)?'check':''}>\r\n\r\n                        </div>\r\n                 </div>\r\n            </div>\r\n            <div className='answer-text  xs:w-4/5 '>\r\n                <h5>{text}</h5>\r\n            </div>\r\n        </label>\r\n    </div>\r\n)\r\n\r\nexport default AnswerOption;","import React from 'react';\r\n\r\nimport './answer-box.styles.scss';\r\nimport AnswerOption from '../answer-option/answer-option.component';\r\n\r\n \r\n\r\nclass AnswerBox extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n\r\n            selected: null,\r\n            alreadySelectedCorrect:false,\r\n            disable:false\r\n        }\r\n    }\r\n\r\n    selectOption = (index, timeUp) => {\r\n\r\n        if(timeUp){\r\n            this.setState({disable: true})\r\n        }else{\r\n            this.setState({disable:false})\r\n        }\r\n\r\n        this.setState({\r\n            selected: index\r\n        },()=>{\r\n            if( this.state.selected >= 0){\r\n\r\n                if(this.props.options[this.state.selected] === (this.props.correctAnswer) ){\r\n                      \r\n                      if(!this.state.alreadySelectedCorrect){\r\n                            this.setState({\r\n                                alreadySelectedCorrect:true\r\n                            },() => {\r\n                                this.props.increaseScore();\r\n                               \r\n                            })\r\n                      }\r\n                      \r\n                    \r\n                   \r\n                }\r\n\r\n                if(this.props.options[this.state.selected] !== (this.props.correctAnswer) && this.state.alreadySelectedCorrect){\r\n                     this.props.decreaseScore()\r\n                    this.setState({\r\n                        alreadySelectedCorrect:false\r\n                    })\r\n                    \r\n                }\r\n                 \r\n            }\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n\r\n        const {options, timeUp, correctAnswer} = this.props;\r\n\r\n         \r\n        return (\r\n            <div className='answer-box w-9/10 xs:h-45/100 sm:h-3/5 flex flex-col justify-start items-center'>\r\n                {\r\n                    options.map((option,index) => (\r\n                        <AnswerOption\r\n                        key={ index} \r\n                         optionIndex={index}\r\n                         \r\n                         disable={this.state.disable}\r\n                        text={option} \r\n                        selectOption={()=>this.selectOption(index,timeUp)} \r\n                        checked={this.state.selected === index}\r\n                        timeUp={timeUp}\r\n                        correctAnswer={correctAnswer}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\nexport default AnswerBox;","import React from 'react';\r\n\r\nimport './question-body.styles.scss';\r\nimport CustomButton from '../custom-button/custom-button.component';\r\nimport AnswerBox from '../answer-box/answer-box.component';\r\n\r\nfunction shuffle(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nclass QuestionBody extends React.Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            AnswerBoxOptions: []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n        let  myQuestion  =  this.props.question;\r\n\r\n        let myOptions = [myQuestion.correct_answer, ...myQuestion.incorrect_answers];\r\n\r\n        let shuffledOptions = shuffle(myOptions);\r\n\r\n        this.setState({AnswerBoxOptions: shuffledOptions})\r\n    }\r\n\r\n    render() {\r\n\r\n        const {index , question, timeUp, goToNext, lastQuestion, increaseScore, decreaseScore} = this.props;\r\n\r\n        \r\n         \r\n\r\n\r\n        return (\r\n            <div className='question-body w-full h-3/4 bg-white overflow-hidden rounded-lg shadow-xl flex flex-col justify-start items-center'>\r\n                <div className='question-text w-9/10 xs:h-35/100 sm:h-1/5 flex flex-col justify-center  '>\r\n                    <h3>Q. {index + 1}</h3>\r\n                    <h3>{question.question}</h3>\r\n                </div>\r\n                 <AnswerBox \r\n                    options = {this.state.AnswerBoxOptions} \r\n                    correctAnswer={question.correct_answer}\r\n                    timeUp={timeUp}\r\n                    increaseScore={increaseScore}\r\n                    decreaseScore={decreaseScore}\r\n                />\r\n                <div className='footer w-9/10 h-15/100 flex flex-row justify-center items-center'>\r\n                    <CustomButton \r\n                    text={(lastQuestion)?'Submit':'Next'}\r\n                    onClickFunction={goToNext}\r\n                    submitQuiz={lastQuestion}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuestionBody;","import React from 'react';\r\n\r\nimport './loader.styles.scss';\r\n\r\nconst Loader = ({basicLoader}) => (\r\n    <div className='loader h-3/4 w-full  flex flex-col justify-center items-center bg-white rounded-lg shadow-2xl' style={(basicLoader)?{'height':'90%','width':'80%'}:{'width':'100%'}}  >\r\n        <div className={ `lds-roller`}>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Loader;","import React from 'react';\r\n\r\nimport './question.styles.scss';\r\nimport Timer from '../timer/timer.component';\r\nimport QuestionBody from '../question-body/question-body.component';\r\nimport Loader from '../loader/loader.component';\r\n \r\n\r\nclass Question extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            secondsLeft:12,\r\n             \r\n        }\r\n    }\r\n\r\n\r\n     \r\n    \r\n\r\n    componentDidMount(){\r\n\r\n        this.intervalID = setInterval(()=> {\r\n\r\n            this.setState((prevState) => {\r\n\r\n                 return {\r\n                        secondsLeft: ( prevState.secondsLeft > 0)?prevState.secondsLeft - 1:0\r\n                  } \r\n            })\r\n\r\n        },1000)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n\r\n        clearInterval(this.intervalID)\r\n    }\r\n\r\n    render(){\r\n        \r\n        const timeUpAlert = this.state.secondsLeft === 0 ? 'Oops...Time Up!': `C'mon! You can do it!`;\r\n\r\n        const {id, size, question , next, increaseScore, decreaseScore} = this.props;\r\n\r\n        return(\r\n            <div className=' w-full  h-152  xs:m-3  md:m-12  flex  flex-col justify-between items-center overflow-hidden'>\r\n                 <Timer \r\n                 totalTime ={10}\r\n                 timeUpAlert ={timeUpAlert}\r\n                 secondsLeft={this.state.secondsLeft<=10? (this.state.secondsLeft):10}/>\r\n                { \r\n                    (this.state.secondsLeft>10)\r\n                    ? <Loader/>\r\n                    : <QuestionBody \r\n                            question={question}\r\n                            index = {id}\r\n                            goToNext={()=> {\r\n\r\n                                    if(id< size-1){\r\n                                        this.setState({ secondsLeft: 12 });\r\n                                        next();\r\n                                        \r\n                                    }\r\n                                    else{\r\n            \r\n                                        this.props.changeRoute('end');\r\n                                    }\r\n                                \r\n                            }}\r\n                           \r\n                            lastQuestion={\r\n                                id === size-1\r\n                            }\r\n\r\n                            timeUp={this.state.secondsLeft <= 0}\r\n                            increaseScore={increaseScore}\r\n                            decreaseScore={decreaseScore}\r\n                        />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Question;","import React from 'react';\r\nimport Question from '../../components/question/question.component';\r\n\r\nimport './quiz.styles.scss';\r\n\r\n\r\n\r\n\r\nclass Quiz extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            \r\n            \r\n            currentQuestion:0,\r\n\r\n           \r\n        }\r\n    }\r\n\r\n\r\n    nextQuestion =  () =>  {\r\n\r\n        \r\n        this.setState((prevState,prevProps) => {\r\n\r\n             \r\n                return {\r\n                    currentQuestion: (prevState.currentQuestion < prevProps.questionSet.length-1)\r\n                                     ?  prevState.currentQuestion + 1\r\n                                     :  prevProps.questionSet.length-1\r\n                }\r\n             \r\n        })\r\n    }\r\n\r\n    \r\n    \r\n   \r\n\r\n    render(){   \r\n        const {currentQuestion} = this.state;\r\n        \r\n       const { questionSet } = this.props;\r\n\r\n         return (\r\n            <div className='quiz md:w-3/5 xs:w-4/5 flex flex-col justify-center items-center'>\r\n                 <Question \r\n                    id={currentQuestion} \r\n                    size={questionSet.length} \r\n                    question = {questionSet[currentQuestion]} \r\n                    next={this.nextQuestion}\r\n                    changeRoute ={this.props.changeRoute}\r\n                    increaseScore={this.props.increaseScore}\r\n                    decreaseScore={this.props.decreaseScore}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz;","import React from 'react';\r\n\r\nimport './start.styles.scss';\r\n\r\nimport CustomButton from '../../components/custom-button/custom-button.component';\r\n\r\nconst StartPage = ({changeRoute}) => (\r\n    <div className='pt-8 pb-8 md:w-2/5 xs:w-4/5 bg-white flex flex-col justify-center items-center rounded-lg shadow-xl'>\r\n        <div className='pt-2 pb-6 w-full xs:px-1 flex flex-col justify-center items-center'>\r\n           \r\n                <img className='mt-2   rounded-full bg-black mx-1 border border-pink-900 '  src='https://robohash.org/8?set=set5' alt='profile'/>\r\n            \r\n        </div>\r\n        <div className='footer w-full flex flex-col justify-center items-center'>\r\n            <CustomButton \r\n                text={`Let's Start!`}\r\n                onClickFunction={() => changeRoute('quiz')}\r\n                \r\n            />\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default StartPage;","import React from 'react';\r\n\r\nimport './end.styles.scss';\r\nimport CustomButton from '../../components/custom-button/custom-button.component';\r\n\r\nconst EndPage= ({score, totalScore, changeRoute, resetScore}) => {\r\n    \r\n    let performanceText=null;\r\n    const percentage = (score/totalScore)*100;\r\n    if( percentage>=90){\r\n        performanceText= <h2 style={{color:'#43a047'}}> Amazing! </h2>\r\n    }\r\n    else if (  percentage < 90 && percentage>=70){\r\n        performanceText= <h2 style={{color:'#66bb6a'}}> Good!</h2>\r\n    }\r\n    else if( percentage < 70 && percentage >= 45){\r\n        performanceText = <h2 style={{color:'#ffa726'}}>{`Average :)`}</h2>\r\n    }\r\n    else {\r\n         performanceText = <h2 style={{color:'#f44336'}}>{`Below Average :(`}</h2>\r\n    }\r\n\r\n    return (\r\n     <div className='end-page  bg-white flex flex-col justify-center items-center rounded-lg shadow-2xl'>\r\n        <div className='score flex flex-col justify-center items-center'>\r\n            <h4>Your score is:</h4>\r\n            <h1>{score}/{totalScore}</h1>\r\n        </div>\r\n        <div className='performance flex flex-col justify-center items-center'>\r\n            <h4>Your performance was:</h4>\r\n            {performanceText}\r\n        </div>\r\n        <div className='footer flex flex-col justify-center items-center' >\r\n            <CustomButton\r\n                text={'Play Again'}\r\n                onClickFunction={()=> {\r\n                    changeRoute('start');\r\n                    resetScore();\r\n                }}\r\n            />\r\n        </div>\r\n    </div>\r\n)}\r\n\r\nexport default EndPage;","import React from 'react';\n\nimport './App.css';\n\nimport Quiz from './pages/quiz/quiz.page';\nimport StartPage from './pages/start/start.page';\nimport EndPage from './pages/end/end.page';\nimport Loader from './components/loader/loader.component';\n \n\nclass  App extends React.Component {\n  \n  constructor(){\n    super();\n\n    this.state={\n      currentPage:'start',\n      score:0,\n      totalScore:0,\n      isLoading:true,\n      questionSet:null,\n    }\n  }\n\n\n  changeRoute = (route ) => {\n    this.setState({currentPage: route})\n\n\n    //when the app resets to start get new set of questions\n    if(route === 'start'){\n      fetch('https://opentdb.com/api.php?amount=10')\n      .then(res => res.json())\n      .then(data =>  this.setState({ questionSet:  data.results, isLoading: false }))\n      .catch(err => console.log(err))\n    }\n  }\n\n  resetScore =() => {\n    this.setState({\n      score:0\n    })\n    \n  }\n\n  increaseScore = () => {\n    this.setState(prevState => {\n      return {\n        score: prevState.score + 1\n      }\n    })\n  }\n\n  decreaseScore = () => {\n    this.setState(prevState => {\n      return {\n        score: prevState.score - 1\n      }\n    })\n  }\n\n  componentDidMount(){\n        \n    \n      fetch('https://opentdb.com/api.php?amount=10')\n      .then(res => res.json())\n      .then(data =>  this.setState({ questionSet:  data.results, isLoading: false }))\n      .catch(err => console.log(err))\n     \n\n}\n  \n  render(){\n\n\n    const { score, currentPage, questionSet , isLoading } = this.state;\n\n   \n\n    let content = null;\n\n    if(currentPage === 'quiz'){\n      content = <Quiz questionSet={questionSet}  changeRoute={this.changeRoute}  increaseScore={this.increaseScore} decreaseScore={this.decreaseScore}/>\n    }\n    else if(currentPage === 'end'){\n      content = <EndPage resetScore={this.resetScore} changeRoute={this.changeRoute} score={score} totalScore={questionSet.length} />;\n    }\n    else if( currentPage === 'start'){\n      content =  <StartPage changeRoute={this.changeRoute}/>\n    }\n\n    return (\n      <div className=\"my-gradient-bg \n          h-screen  \n           \n          flex \n          flex-row \n          justify-center \n          items-center\">\n           \n            {(!isLoading)?content:   <Loader basicLoader/>  }\n           \n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}